doctype html
html
    head
        title
        link(rel='stylesheet', href='/css/lib/materialize.css')
        link(rel='stylesheet', href='/css/lib/materialize.icons.css')
        link(rel='stylesheet', href='/css/lib/materialdesignicons.css')
        link(rel='stylesheet', href='/css/lib/materialize.clockpicker.min.css')
        link(rel='stylesheet', href='/css/lib/font-awesome-4.0.3/css/font-awesome.min.css')
        link(rel='stylesheet', href='/sass/v2/common')
        link(rel='stylesheet', href='/css/alarms/alarms.css')

    body.alarmsBody.noSelect
        .titleBar
            .title.cursorPointer
                .col.s6.alarmsViews
                    .btn.btn-small.waves-effect.waves-light.blue-grey.dropdown-button(data-activates="alarmViewsDropdown")
                        span(data-bind="text: viewTitle() + ' ALARMS'")
                    // ko if: ($root.defaultViews.length > 1)
                    ul#alarmViewsDropdown.dropdown-content
                        // ko foreach: $root.defaultViews
                        li
                            a(data-bind="text: title, click: $root.changeView, css: { active: $root.isCurrentView($data) }")
                        // /ko
                    // /ko
            .filterIcon.resetFilter(data-bind="click: resetFilters, visible: dirty", title="Reset Filter")
                .fa.fa-filter.fa-2x
                .fa.fa-times-circle.x(data-bind="visible: dirty")

            .filterIcon.ack(data-bind="visible: anyAckSelected, click: ackAlarms", title="Acknowledge selected alarms")
                span(data-bind="visible: ackInProgress")
                    .fa.fa-spinner.fa-spin
                    | &nbsp;&nbsp;
                | ACK

            .filterIcon.fa.fa-refresh.fa-spin(data-bind="visible: alarms().gettingData", title="Getting alarms from server...")
            .filterIcon.fa.fa-refresh.timeout(data-bind="visible: alarms().timeout, click: refreshAlarms", title="Get alarms request timed out. Click to try again...")

        .content
            // FILTERS
            #filters
                .filterContainer
                    .filterIcon.fa(id="pausePlay", data-bind="click: toggleViewPaused, css: { 'fa-pause': !$root.currentView().paused(), 'fa-play-circle filterActive': $root.currentView().paused() }, attr: {title: $root.currentView().paused() ? 'Resume alarm updates':'Pause alarm updates'} ")
                // Point Attributes FILTER
                .filterContainer#pointAttribsFilters(title="Filter by point name and/or point type" )
                    .filterIcon.fa.fa-font.fa(data-bind="click: showPointFilter")
                // TIME DATE FILTERS
                .filterContainer#timeDateFilters(title="Filter by date and/or time")
                    .filterIcon.fa.fa-clock-o.fa(data-bind="click: function () { $root.editDateTimeFilter() }, visible: filters.dateTime.visible")

                // ALARM CLASS FILTERS
                .filterContainer.withBorder.horizontalMenu.alarmClass(data-bind="visible: filters.alarmClass.visible")
                    .filterSetTitle Class
                    .filterSet(data-bind="foreach: filters.alarmClass.options")
                        a(data-bind="click: $root.toggleOption, event: { contextmenu: $root.toggleOption }, attr: { id: id }")
                            span.fa(data-bind="css: {'fa-ban': !isActive(), 'fa-check-circle': isActive}")
                            span.filterText(data-bind="text: text")
                .filterContainer.verticalMenu.alarmClass(data-bind="visible: filters.alarmClass.visible")
                    .dropdown.filterSet
                        .btn.btn-small.waves-effect.waves-light.blue-grey.dropdown-button(data-activates="alarmClassDropdown")
                            span.title Class
                        ul#alarmClassDropdown.dropdown-content
                            // ko foreach: filters.alarmClass.options
                            li
                                a(data-bind="click: $root.toggleOption, event: { contextmenu: $root.toggleOption }, attr: { id: id }")
                                    span.fa(data-bind="css: {'fa-ban': !isActive(), 'fa-check-circle': isActive}")
                                    span.filterText(data-bind="text: text")
                            // /ko

                // ALARM CATEGORY FILTERS
                .filterContainer.withBorder.horizontalMenu.alarmCategory(data-bind="visible: filters.alarmCategory.visible")
                    .filterSetTitle(title="Category") Category
                    .filterSet(data-bind="foreach: filters.alarmCategory.options")
                        a(data-bind="click: $root.toggleOption, event: { contextmenu: $root.toggleOption }")
                            span.fa(data-bind="css: {'fa-ban': !isActive(), 'fa-check-circle': isActive}")
                            span.filterText(data-bind="text: text")
                .filterContainer.verticalMenu.alarmCategory(data-bind="visible: filters.alarmCategory.visible")
                    .dropdown.filterSet
                        .btn.btn-small.waves-effect.waves-light.blue-grey.dropdown-button(data-activates="alarmCategoryDropdown")
                            span.title Category
                            span &nbsp;&nbsp;
                            span.caret
                        ul#alarmCategoryDropdown.dropdown-content
                            // ko foreach: filters.alarmCategory.options
                            li
                                a(data-bind="click: $root.toggleOption, event: { contextmenu: $root.toggleOption }")
                                    span.fa(data-bind="css: {'fa-ban': !isActive(), 'fa-check-circle': isActive}")
                                    span &nbsp;
                                    span.filterText(data-bind="text: text")
                            // /ko

                // PRINT BUTTON
                .btn.btn-small.right.waves-effect.waves-light.blue-grey(data-bind="click:printAlarms") Print

            // ALARMS
            #alarmContainer
                .header
                    .colSelect.selectAll
                        input#checkBoxForAllSelected.medium.filled-in(data-bind="click: selectAll, checkedValue: $data, checked: allSelected", type="checkbox")
                        label.blue-grey-text(for="checkBoxForAllSelected")
                        .selectAlarmTypesDropdown
                            .btn.dropdown-button(data-activates="selectAlarmTypesDropdown")
                            ul#selectAlarmTypesDropdown.dropdown-content
                                li
                                    a(data-bind="click: selectUnacknowledged") Unacknowledged
                                li
                                    a(data-bind="click: selectNone") None
                                li.divider
                                li
                                    a(data-bind="click: deselectAll") Deselect All Alarms
                                        | (
                                        span(data-bind="text: selectedRows().length")
                                        | )
                    .colAck Ack
                    .colClass Class
                    .colTime(data-bind="click: toggleViewSort")
                        | Time
                        i.pull-right.fa(data-bind="css: { 'fa-arrow-up' : $root.currentView().sortAscending(), 'fa-arrow-down' : !$root.currentView().sortAscending() }")
                    .colMsg &nbsp; Message

                .alarms(data-bind="visible: !alarms().timeout()")
                    table
                        tbody(data-bind="foreach: alarmsPAGESIZE")
                            tr(data-bind="click: $root.selectRow, css: { selectedRow: $data.isSelected  }")
                                td.colSelect
                                    input.medium.filled-in(data-bind="checked: $data.isSelected, attr: { id: 'checkBoxForRow' + $index() }", type="checkbox")
                                    label.blue-grey-text(data-bind="attr: { for: 'checkBoxForRow' + $index() }")
                                td.colAck
                                    // If alarm has been acknowledged
                                    // ko if: $data.ackStatus() === 2
                                    div.tableButton.acked(data-bind="text: $data.ackUser, attr: { title: $data.ackInfo }")
                                    // /ko

                                    // If alarm needs acknowledging
                                    // ko if: $data.ackStatus() === 1 && $root.userHasPermissionToAck($data)
                                    div.tableButton.cursorPointer(data-bind="click: $root.ackAlarm", title="Acknowledge alarm") ACK
                                    // /ko

                                    // If alarm is in the process of being acknowledged
                                    // ko if: $data.ackStatus() === 1.5
                                    div.tableButton
                                        i.fa.fa-spinner.fa-spin
                                        | &nbsp;ACK
                                    // /ko

                                    // If alarm acknowledge timed out
                                    // ko if: $data.ackStatus() === -1
                                    div.tableButton.ackError.cursorPointer(data-bind="click: $root.ackAlarm", title="The acknowledge request timed out. Click to try agian.") ACK ERROR
                                    // /ko

                                td.colClass
                                    span(data-bind="text: alarmClass, attr: { class: alarmClass }")
                                td.colTime
                                    span.selectable
                                        span(data-bind="text: prettyDate")
                                        |  &nbsp;
                                        span(data-bind="text: prettyTime")
                                td.colMsg
                                    span.selectable(data-bind="text: msgText, event: { contextmenu: $root.selectRow }, style: { color: $root.toHexColor(TextColor), backgroundColor: $root.toHexColor(BackColor) }, css: {'msgText': upi !== 0}")

                .alarmsGradient &nbsp;

                .newAlarm.newAlarmTop
                    span New alarm added. Click to view.
                .newAlarm.newAlarmBottom
                    span New alarm added. Click to view.

                .mask(data-bind="visible: alarms().gettingData")

                // ko if:alarms().count() === 0 && !alarms().gettingData()
                // ko if:alarms().timeout() === false
                p#noAlarms Hooray! No alarms here.
                // /ko
                // ko if:alarms().timeout() === true
                p#noAlarms(style="color: red;") Error: Request for alarms timed out. Please try again or contact your system administrator if this problem continues.
                // /ko
                // /ko

                .pages
                    .pull-left
                        //-  TODO
                        //-  Disable until this is supported in v2
                        //- .pop.cursorPointer(data-bind='click: togglePop')
                            .popOut
                                .fa.fa-arrow-circle-up
                                | Pop Out
                            .popIn.hidden
                                .fa.fa-arrow-circle-down
                                | Pop In

                        // ko if: $root.currentView().pageNumber() > 1
                        // ko if: alarms().numberOfPages() > 2
                        a(href='javascript:void(0)', data-bind="click: changePage.bind($data, 'begin')") <<<
                        | &nbsp;&nbsp;
                        // /ko
                        a(href='javascript:void(0)', data-bind="click: changePage.bind($data, -1)") Previous Page
                        | &nbsp;&nbsp;
                        // /ko

                        | Page&nbsp;
                        span(data-bind="text: $root.currentView().pageNumber")
                        |  of&nbsp;
                        span(data-bind="text: alarms().numberOfPages")
                        | &nbsp; &nbsp;

                        // ko if: $root.currentView().pageNumber() !== alarms().numberOfPages()
                        a(href='javascript:void(0)', data-bind="click: changePage.bind($data, +1)") Next Page
                        // ko if: alarms().numberOfPages() > 2
                        | &nbsp;&nbsp;
                        a(href='javascript:void(0)', data-bind="click: changePage.bind($data, 'end')") >>>
                        // /ko
                        // /ko


                    .pull-right
                        span(data-bind="text: alarms().count()")
                        |  Alarms

        // (data-bind="css: {displayDiv: alarmDetailVisible(), hideDiv: !alarmDetailVisible()} ")
        .detailContainer
            .subTitle ALARM DETAIL
            .fa.fa-2x.fa-times(data-bind="click: closeAlarmDetail.bind($data, null)")
            .detailContent
                .name
                    i.fa.fa-filter
                    .text
                        a.cursorPointer(data-bind="text: alarmDetail.alarm().Name, click: callChangePointAttribsFilter.bind($data)")

                .notifications
                    // ko if: alarmDetail.gettingData() === true
                    i.fa.fa-spinner.fa-spin
                    // /ko

                    // ko if: alarmDetail.error() === true
                    .errorTxt An unexpected error occurred.
                    .btn.btn-small.right.waves-effect.waves-light.blue-grey(data-bind="click: openAlarmDetail.bind($data, alarmDetail.alarm())") Reload Content
                    // /ko

                .displays.scrollable.thinScroll(data-bind="visible: !alarmDetail.gettingData() && !alarmDetail.error()")
                    // ko foreach: alarmDetail.displays
                    .thumb.cursorPointer(data-bind="click: $root.openDisplay", title="Open this display in a new window.")
                        img(data-bind="dataSrc: $data._id")
                        div.truncate(data-bind="text: $data.Name, attr: {title: $data.Name}", style="background-color: #ECECEC; padding: 10px;")
                    // /ko

                    // ko if: alarmDetail.displays().length === 0
                    | This point was not found on any displays.
                    // /ko

        include modals/timeDateFilters
        .bodyMask

        script(type='text/javascript', src='/js/lib/jquery-1.9.1.min.js')
        script(type='text/javascript', src='/js/lib/moment.js')
        script(type='text/javascript', src='/js/lib/knockout-3.1.0.js')
        script(type='text/javascript', src='/js/lib/materialize.min.js')
        script(type='text/javascript', src='/js/lib/materialize.clockpicker.js')
        script(type='text/javascript', src="/js/lib/socket.io.js")
        script(type='text/javascript', src='/js/lib/store2.min.js')
        script(type='text/javascript', src='/js/lib/date.js')
        script(type='text/javascript', src='/js/lib/jstween-1.1.min.js')
        script(type='text/javascript', src='/js/lib/jquery.printarea.js')
        script(type='text/javascript', src='/js/v2/dtiCommon.js')
        script(type='text/javascript', src='/js/v2/dorsettUtility.js')
        script(type='text/javascript', src='/js/lib/config.js')
        script(type='text/javascript', src='/js/alarms/alarms.js')