doctype html
html.direports
    head
        title #{title}
        meta(charset="utf-8")
        //- link(rel='stylesheet', href='/css/lib/bootstrap-3.3.6/bootstrap.css')
        //- link(rel='stylesheet', href="/css/lib/bootstrap-datepicker.css")
        //- link(rel='stylesheet', href="/css/lib/jquery-clockpicker.min.css")
        link(rel='stylesheet', href='/css/lib/materialize.css')
        link(rel='stylesheet', href='/css/lib/materialize.icons.css')
        link(rel='stylesheet', href='/css/lib/materialdesignicons.css')
        link(rel='stylesheet', href='/css/lib/materialize.clockpicker.min.css')
        //- link(rel='stylesheet', href="/css/lib/font-awesome-4.3.0/css/font-awesome.min.css")
        //- link(rel='stylesheet', href='/css/lib/DataTables-1.10.12/media/css/dataTables.bootstrap.min.css')
        link(rel='stylesheet', href='/css/lib/DataTables-1.10.12/extensions/ColReorder/css/colReorder.foundation.css')
        link(rel='stylesheet', href='/css/lib/DataTables-1.10.12/extensions/Buttons/css/buttons.foundation.css')
        link(rel='stylesheet', href='/css/lib/jquery-ui.min.css')
        //- link(rel='stylesheet', href='/css/lib/daterangepicker.css')
        link(rel='stylesheet', href='/css/reports/reporting.css')
        link(rel='stylesheet', href='/css/lib/DataTables-1.10.12/media/css/dataTables.material.css')
        script(type="text/javascript" src="/js/lib/jquery-2.2.4.js")
        script(type="text/javascript" src="/js/lib/jquery-ui.js")
        script(type="text/javascript" src='/js/lib/moment.js')
        //- script(type="text/javascript" src='/js/lib/bootstrap-3.3.6/bootstrap-3.3.6.js')
        //- script(type="text/javascript" src="/js/lib/bootstrap-datepicker.js")
        //- script(type="text/javascript" src="/js/lib/jquery-clockpicker.min.js")
        //- script(type="text/javascript" src='/js/lib/material.js')
        script(type="text/javascript" src='/js/lib/materialize.js')
        script(type="text/javascript" src='/js/lib/materialize.clockpicker.min.js')
        //- script(type="text/javascript" src='/js/lib/lodash.min.js')
        //- script(type="text/javascript" src='/js/lib/config.js')
        script(type="text/javascript" src='/js/lib/knockout-3.4.0.js')
        script(type="text/javascript" src='/js/lib/ko.validation.js')
        script(type="text/javascript" src='/js/lib/socket.io.js')
        script(type="text/javascript" src='/js/lib/store.min.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/media/js/jquery.dataTables.min.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/media/js/dataTables.material.min.js')
        //- script(type="text/javascript" src='/js/lib/DataTables-1.10.12/media/js/dataTables.bootstrap.min.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/extensions/ColReorder/js/dataTables.colReorder.min.js')
        //- script(type="text/javascript" src='/js/lib/DataTables-1.10.10/dataTables.colReorderWithResize.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/extensions/Buttons/js/dataTables.buttons.min.js')
        //- script(type="text/javascript" src='/js/lib/daterangepicker.js')
        script(type="text/javascript" src='/js/lib/jszip.min.js')
        script(type="text/javascript" src='/js/lib/pdfmake.min.js')
        script(type="text/javascript" src='/js/lib/vfs_fonts.js')
        script(type="text/javascript" src='/js/lib/highcharts.src.js')
        script(type="text/javascript" src='/js/trendPlots/trendplot.js')
        script(type="text/javascript" src='/js/lib/jquery.printarea.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/extensions/Buttons/js/buttons.html5.min.js')
        script(type="text/javascript" src='/js/lib/DataTables-1.10.12/extensions/Buttons/js/buttons.print.min.js')
        script(type="text/javascript" src="/js/v2/dorsettUtility.js")
        script(type="text/javascript" src="/js/reports/reportsViewModel.js")
    body.blue-grey.lighten-5
        block content
    #window
        #wrapper(style="display:none")
            #sidebar-wrapper.leftBar
                div
                    ul
                        li.configurationButton
                            a.waves-effect.waves-light.btn.tooltipped.blue-grey(data-bind="click: reportConfiguration.bind()", style="margin-top: 2px;", data-position="bottom" data-delay="500" data-tooltip="Report settings")
                                //| Configuration
                                i.material-icons.center settings
                        li(data-bind='if: $root.canEdit()')
                            a.btn.tiny.waves-effect.waves-light.blue-grey.tooltipped.saveReportButton(style="margin-top: 2px;", data-position="bottom" data-delay="500" data-tooltip="Save report")
                                i.mdi.mdi-content-save.center
                        li.viewReportButton
                            a.waves-effect.waves-light.btn.tooltipped.blue-grey(data-bind="click: function(){ $root.requestReportData() }", style="margin-top: 2px;", data-position="bottom" data-delay="500" data-tooltip="Run report")
                                //| Run Report
                                i.material-icons.center play_arrow


                .preloader-wrapper.small.active.runReportTabSpinner(data-bind="css: {displayDiv: displayTabSpinner(), hideDiv: !displayTabSpinner()} ", title="Requesting Report Data")
                    .spinner-layer
                        .circle-clipper.left
                            .circle
                        .gap-patch
                            .circle
                        .circle-clipper
                            .circle
                .runReportCheckMark(data-bind="css: {displayDiv: displayTabCheckmark(), hideDiv: !displayTabCheckmark()} ", title="Report is ready")
                    i.material-icons.center thumb_up
            #page-content-wrapper.rightPanel
                .container-fluid
                    .runReportSpinner(data-bind="css: { displayDiv: displayMainSpinner(), hideDiv: !displayMainSpinner()} ", title="Requesting Report Data")
                        div.preloader-wrapper.small.active
                            div.spinner-layer
                                div.circle-clipper.left
                                    div.circle
                                div.gap-patch
                                    div.circle
                                div.circle-clipper
                                    div.circle
                        span.spinnertext.teal-text Getting Data
                    .runReportChartSpinner(data-bind="css: { displayDiv: displayChartSpinner(), hideDiv: !displayChartSpinner()}", title="Requesting Report Data for Chart")
                        div.preloader-wrapper.small.active
                            div.spinner-layer
                                div.circle-clipper.left
                                    div.circle
                                div.gap-patch
                                    div.circle
                                div.circle-clipper
                                    div.circle
                        span.spinnertext.teal-text(data-bind="text: chartSpinnerTitle")
                    .tabConfiguration
                        .row
                            .reportTabs.col.s12
                                ul.tabs
                                    li.tab.col.attribs(data-bind='css: reportType === "Property" ? "s2":"s3" ')
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text.active(href="#reportAttribs", data-toggle="tab") Attributes
                                    li.tab.col.columns(data-bind='css: reportType === "Property" ? "s2":"s3" ')
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text(href="#reportColumns", data-toggle="tab") Columns
                                    //- li.tab.col.s1.columns2(role="presentation")
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text(href="#gridColumnConfig", data-toggle="tab") Grid Config
                                    // ko if: (reportType() === 'Property')
                                    li.tab.col.s4.filterByPoint(role="presentation")
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text(href="#filterByPoint", data-toggle="tab") Filter By Point Types / Points
                                    // /ko
                                    li.tab.col.additionalFilters(data-bind='css: reportType === "Property" ? "s2":"s3" ')
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text(href="#additionalFilters", data-toggle="tab") Additional Filters
                                    li.tab.col(data-bind='css: reportType === "Property" ? "s2":"s3" ')
                                        a.blue-grey.lighten-4.strong.toggleTab.blue-grey-text(href="#schedule") Scheduled Actions
                        div.configurationContent
                            //- div
                                h6.strong.reportTitle(data-bind="text: reportDisplayTitle")
                                .reporttype.tiny.center-align(data-bind="text: reportType")
                            div.tab-content
                                div.reportAttribs#reportAttribs.active.tab-pane
                                    .form-inline.blue-grey-text(style="display: inline-flex")
                                        div.input-field.col
                                            input.pointName1.form-control.input-md#pointName1(data-bind="enable: $root.canEdit(), textInput: $root.pointName1", required, type="text")
                                            label(data-bind="updateLabel: $root.pointName1, attr: {for: 'pointName1'}") Name 1
                                        div.input-field.col
                                            input.pointName2.form-control.input-md#pointName2(data-bind="enable: $root.canEdit(), textInput: $root.pointName2", required, type="text")
                                            label(data-bind="updateLabel: $root.pointName2, attr: {for: 'pointName2'}") Name 2
                                        div.input-field.col
                                            input.pointName3.form-control.input-md#pointName3(data-bind="enable: $root.canEdit(), textInput: $root.pointName3", required, type="text")
                                            label(data-bind="updateLabel: $root.pointName3, attr: {for: 'pointName3'}") Name 3
                                        div.input-field.col
                                            input.pointName4.form-control.input-md#pointName4(data-bind="enable: $root.canEdit(), textInput: $root.pointName4", required, type="text")
                                            label(data-bind="updateLabel: $root.pointName4, attr: {for: 'pointName4'}") Name 4
                                    .form-inline.blue-grey-text
                                        div.input-field.col
                                            input.reportTitleInput.form-control.input-md#reportTitleInput(data-bind="enable: $root.canEdit(), textInput: $root.reportDisplayTitle", required, type="text")
                                            label(data-bind="updateLabel: $root.pointName3, attr: {for: 'pointName3'}") Report Title
                                    .form-group.clearfix(style="display: inline-flex")
                                        .numberOfEnteriesPerPage
                                            label # of entries per Page
                                            .col.s1.entries
                                                .dropdown.availableEntries
                                                    a.btn.waves-effect.waves-light.blue-grey.dropdown-button(data-bind="materializeDropdown", href="#", data-activates="enteriesDropdown")
                                                        span(data-bind="text: (selectedPageLength() === -1 ? 'All' : selectedPageLength)")
                                                        // ko if: ($root.listOfEntriesPerPage().length > 1)
                                                        span.caret.lm10px
                                                        // /ko
                                                    // ko if: ($root.listOfEntriesPerPage().length > 1)
                                                    ul#enteriesDropdown.calculations.dropdown-content
                                                        // ko foreach: $root.listOfEntriesPerPage()
                                                        li
                                                            a(data-bind="click: function(){ $root.selectNumberOfEntries($element, $data.value) }, text: $data.value")
                                                        // /ko
                                                    // /ko
                                        // ko if: (chartable())
                                        .chartTypeSelection
                                            label Chart Type
                                            .col.s1.chartTypes
                                                .dropdown.availableChartTypes
                                                    a.btn.waves-effect.waves-light.blue-grey.dropdown-button(data-bind="materializeDropdown", href="#", data-activates="chartTypesAttribsDropdown")
                                                        span(data-bind="text: selectedChartType()")
                                                        // ko if: ($root.listOfChartTypes().length > 1)
                                                        span.caret.lm10px
                                                        // /ko
                                                    // ko if: ($root.listOfChartTypes().length > 1)
                                                    ul#chartTypesAttribsDropdown.chartTypes.dropdown-content
                                                        // ko foreach: $root.listOfChartTypes()
                                                        li
                                                            a(data-bind="click: function(){ $root.selectChartType($element, $data.value) }, text: $data.text")
                                                        // /ko
                                                    // /ko
                                        // /ko
                                div#reportColumns.tab-pane
                                    h6.strong.panel-title
                                        table.columnsGrid.small.grid.table
                                            thead
                                                tr.strong(style="height:44px")
                                                    th.medium.strong Column Key
                                                    // ko if: (reportType() !== 'Property')
                                                    th.medium.strong Display Name
                                                    // ko if: (calculatable() === true)
                                                    th.medium.strong
                                                        .multiplierColumn Multiplier
                                                    th.medium.strong
                                                        .calculateColumn(tabindex="910")
                                                            .columnText Calculate
                                                            .globalCalculate.availableCalculations.hideDiv
                                                                a.dropdown-button.btn.waves-effect.waves-light.blue-grey(href="#", data-bind="css: {disabled: !$root.canEdit()}", data-activates="globalCalculationsDropdown") Calcs
                                                                    // ko if: ($root.listOfCalculations().length > 1)
                                                                    span.caret.lm10px
                                                                    // /ko
                                                                // ko if: ($root.listOfCalculations().length > 1)
                                                                ul#globalCalculationsDropdown.calculations.dropdown-content(multiple=true)
                                                                    // ko foreach: $root.listOfCalculations
                                                                    li
                                                                        input.medium.filled-in(data-bind="click: function () { return $root.globalCalculationClick($element, $data)}, attr: { id: 'globalCalc_' + $index()}", type="checkbox")
                                                                        label.calcLabel(data-bind="text: ' ' + $data, attr: { for: 'globalCalc_' + $index()}")
                                                                    // /ko
                                                                // /ko
                                                    // ko if: (reportType() === 'Totalizer')
                                                    th.medium.strong.typeColumn Type
                                                    // /ko
                                                    th.medium.strong
                                                        .precisionColumn(tabindex="920")
                                                            .columnText Precision
                                                            .globalPrecision.hideDiv
                                                                input.form-control.globalPrecisionInput(data-bind="reportPrecisionInput: $root.globalPrecisionValue, enable: $root.canEdit()", type="text", min="0", max="20")
                                                    th.medium.strong
                                                        .includeInChartColumn(tabindex="930")
                                                            .columnText Chart
                                                            .globalIncludeInChart.hideDiv
                                                                input.form-control.filled-in(data-bind="checked: $root.allChartCheckboxChecked(), enable: $root.canEdit(), attr: {id : 'globalIncludeInChart' }", type="checkbox")
                                                                label.blue-grey-text.label-tight(data-bind="attr: { for: 'globalIncludeInChart' }")
                                                    th.medium.strong
                                                        .yaxisChartGroupColumn
                                                    // /ko
                                                    // /ko
                                                    th.medium.strong
                                            tbody.sortablecolums(data-bind="foreach: listOfColumns()")
                                                // ko if: $index() > 0
                                                tr.columnRowData(data-bind="css: {'red lighten-4': (colName === 'Choose Point')} ")
                                                    td.columnNameContainer(data-bind="css: {softDeleted: (!!$data.softDeleted)}")
                                                        .handle
                                                        // ko if: ($parent.reportType() !== 'Property')
                                                        // ko if: ($root.canEdit())
                                                        a.btn-mini.tiny.waves-effect.waves-light(data-bind="click: function(){ $parent.clearColumnPoint($index()) }, tooltip: { title: 'Clear' }")
                                                            i.material-icons.prefix.center.blue-grey-text delete
                                                        a.btn-mini.tiny.waves-effect.waves-light(data-bind="click: function(){ $parent.selectPointForColumn($data, $index) }, tooltip: { title: 'Edit' }")
                                                            i.material-icons.prefix.center.blue-grey-text edit
                                                        // /ko
                                                        // ko if: (!!$data.softDeleted)
                                                        span [Deleted]&nbsp;
                                                        // /ko
                                                        .columnName(data-bind="text: colName, click: function(){ $parent.showPointReview($data) }")
                                                        // /ko
                                                        // ko if: ($parent.reportType() === 'Property')
                                                        .dropdown.availablePropertiesContainer
                                                            a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-bind="click: function(){$root.propertySelectClick($element)}", data-toggle="dropdown")
                                                                span(data-bind="text: (colName !== 'Choose Point' ? colName : 'Properties (' + $root.listOfColumnPropertiesLength + ')')")
                                                                span.caret.lm10px
                                                            ul.enumproperties.dropdown-context(data-bind="attr: { id: 'enumpropertiesDropdown'+ $index() }")
                                                                input.form-control.inputSearch.filled-in(data-bind="textInput: $root.columnPropertiesSearchFilter", type="text", placeholder="Search...")
                                                                li(role="separator", class="divider")
                                                                // ko foreach: $parent.columnFilteredProps()
                                                                li
                                                                    a(data-bind="click: function(){ $root.selectPropertyColumn($element, $parentContext.$index(), $data) }, text: $data.name")
                                                                // /ko
                                                        // /ko
                                                    // ko if: ($parent.reportType() !== 'Property')
                                                    td.displayName
                                                        input.form-control.columnDisplayName(data-bind="value: colDisplayName, enable: $parent.canEdit(), event: { change: function() { $parent.designChanged(true) } }", type="text", required)
                                                    td.columnMultiplier
                                                        // ko if: ($data.canCalculate)
                                                        input.form-control.inputMultiplier(data-bind="value: multiplier, enable: $root.canEdit()", type="number")
                                                        // /ko
                                                    td.columnTotals
                                                        // ko if: ($data.canCalculate)
                                                        .availableCalculations
                                                            a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-bind="attr: { 'data-activates': 'calculationsDropdown' + $index() }, materializeDropdown") Calcs
                                                                // ko if: ($parent.listOfCalculations().length > 1)
                                                                span.caret.lm10px
                                                                // /ko
                                                            // ko if: ($parent.listOfCalculations().length > 1)
                                                            ul.calculations.dropdown-content(multiple=true, data-bind="foreach: $parent.listOfCalculations, attr: { 'id': 'calculationsDropdown' + $index() }")
                                                                li
                                                                    input.medium.filled-in(data-bind="checked: $parent.calculation.indexOf($data) !== -1, click: function () { return $root.calculationClick($element, $data, $parentContext.$index())}, attr: { id: 'calc_' + $parentContext.$index() + '_' + $index()}", type="checkbox")
                                                                    label.calcLabel(data-bind="text: ' ' + $data, attr: { for: 'calc_' + $parentContext.$index() + '_' + $index()}")
                                                            // /ko
                                                        // /ko
                                                    // ko if: ($parent.reportType() === 'Totalizer' && valueList.length > 0)
                                                    td.totalizerOperator
                                                        .availableTotalizerOperatorsContainer
                                                            a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-bind="attr: { 'data-activates': 'totalizerOperatorsDropdown'+ $index() }, materializeDropdown")
                                                                span.text(data-bind="text: operator")
                                                                // ko if: (valueList.length > 1)
                                                                span.caret.lm10px
                                                                // /ko
                                                            // ko if: (valueList.length > 1)
                                                            ul.totalizerOperators.dropdown-content(data-bind="attr: { 'id': 'totalizerOperatorsDropdown'+ $index() }")
                                                                // ko foreach: valueList
                                                                li
                                                                    a(data-bind="click: function(){ $root.selectTotalizerOperator($element, $parentContext.$index(), $data.text) }, text: $data.text")
                                                                // /ko
                                                            // /ko
                                                    // /ko
                                                    td.precision
                                                        // ko if: ($data.canCalculate)
                                                        input.form-control.inputPrecision(data-bind="reportPrecisionInput: precision, enable: $root.canEdit()", type="text", min="0", max="20", viewModelField="precision")
                                                        // /ko
                                                    td.includeInChart
                                                        // ko if: ($root.canEdit() && $data.canCalculate)
                                                        input.includeInChartColumn.filled-in(data-bind="checked: includeInChart, enable: ($root.canEdit() && canBeCharted), click: function() { $parent.includeInChartChanged($element, $index()) }, attr: { id: 'includeInChart' + $index()}", type="checkbox")
                                                        label(data-bind="attr: { for: 'includeInChart' + $index() }")
                                                        // /ko
                                                    td.yaxisChartGroup
                                                        .availableAxisGroupsContainer
                                                            a.dropdown-button.btn.waves-effect.waves-light.blue-grey(href="#", data-bind="attr: { 'data-activates': 'yaxisChartGroups'+ $index() }, materializeDropdown")
                                                                span.text(data-bind="text: yaxisGroup")
                                                                span.caret.lm10px
                                                            ul.dropdown-content(data-bind="foreach: $root.yaxisGroups, attr: { 'id': 'yaxisChartGroups'+ $index() }")
                                                                li
                                                                    a(data-bind="click: function(){ $root.selectYaxisGroup($element, $parentContext.$index(), $data) }, text: $data")
                                                    // /ko
                                                    // ko if: ($root.canEdit())
                                                    td.removecolumn
                                                        a.span.removerow.blue-grey-text(data-bind="click: function () { $parent.deleteReportColumn($index()) }") Remove
                                                    // /ko
                                                // /ko
                                            tbody
                                                tr
                                                    // ko if: ($root.canEdit())
                                                    td(colspan="4")
                                                        a.addColumnButton(href="#") Add Column
                                                    // /ko

                                //- div#gridColumnConfig.tab-pane(style="display: none")
                                    h6.strong.panel-title
                                        table.gridColumnConfigTable.small.grid.table
                                            thead
                                                tr.sortablecolums(data-bind="foreach: listOfColumns()")
                                                    th.displayName(data-bind="css: { fixed: ($index() === 0), 'red lighten-4': (colName === 'Choose Point')}")
                                                        .cellContent
                                                            // ko if: $index() > 0
                                                            .handle
                                                            // /ko
                                                            .columnItem(data-bind="css: { globalConfigCell: ($index() === 0)}")
                                                                // ko if: $index() === 0
                                                                // ko if: ($root.reportType() !== 'Property')
                                                                div.columnGlobalConfig(data-bind="click: function () { $root.globalEditColumnFields() }")
                                                                    label.globalConfigColumnItem Global Config
                                                                // /ko
                                                                // /ko
                                                                // ko if: $index() > 0
                                                                // ko if: ($parent.reportType() !== 'Property')
                                                                div.columnNames(data-bind="click: function () { $root.editColumn($data, $index()) }, event: { mouseover: function () { $root.showColumnSettings($element, $data) }, mouseout: function() { $root.hideColumnSettings($element) } }")
                                                                    // ko if: ($parent.reportType() === 'Totalizer')
                                                                    label.gridColumnConfigColumnItem(data-bind="text: (colName === 'Choose Point' ? colName : colDisplayName + ' - ' + operator)", style="margin-right: 2px;")
                                                                    // /ko
                                                                    // ko if: ($parent.reportType() === 'History')
                                                                    label.gridColumnConfigColumnItem(data-bind="text: (colName === 'Choose Point' ? colName : colDisplayName)", style="margin-right: 2px;")
                                                                    // /ko
                                                                // /ko
                                                                // ko if: ($parent.reportType() === 'Property')
                                                                div.columnPropertyNames
                                                                    .dropdown.availablePropertiesContainer
                                                                        a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-bind="click: function(){$root.propertySelectClick($element)}", data-toggle="dropdown")
                                                                            span(data-bind="text: (colName !== 'Choose Point' ? colName : 'Properties (' + $root.listOfColumnPropertiesLength + ')')")
                                                                            span.caret.lm10px
                                                                        ul.enumproperties.dropdown-menu(data-bind="attr: { id: 'enumpropertiesDropdown'+ $index() }")
                                                                            input.form-control.inputSearch.filled-in(data-bind="textInput: $root.columnPropertiesSearchFilter", type="text", placeholder="Search...")
                                                                            li(role="separator", class="divider")
                                                                            // ko foreach: $parent.columnFilteredProps()
                                                                            li
                                                                                a(data-bind="click: function(){ $root.selectPropertyColumn($element, $parentContext.$index(), $data) }, text: $data.name")
                                                                            // /ko
                                                                // /ko
                                                                // /ko
                                                        // ko if: $index() > 0
                                                        .deleteColumnLink
                                                            a.btn-mini.tiny.waves-effect.waves-light.removeColumn(data-bind="click: function() { $root.deleteReportColumn($index()) }")
                                                                i.material-icons.center delete
                                                        // /ko
                                                        .blankspot
                                                            | &nbsp;
                                                        .addColumnContainer
                                                            // ko if: $index() === 0
                                                            a.addColumnGridButton(data-bind="text: 'Add Column', click: function(){ $root.addNewColumn($element, 1) }")
                                                            // /ko
                                                            // ko if: $index() === ($root.listOfColumns().length - 1)
                                                            a.addColumnGridButton.rightSideAddButton(data-bind="text: 'Add Column', click: function(){ $root.addNewColumn($element) }")
                                                            // /ko
                                            tbody(style="border-bottom: 1px solid #d0d0d0;")
                                                tr(data-bind="foreach: listOfColumns()")
                                                    td(data-bind="css: { 'red lighten-4': (colName === 'Choose Point')}")
                                                        div ...
                                                tr(data-bind="foreach: listOfColumns()")
                                                    td(data-bind="css: { 'red lighten-4': (colName === 'Choose Point')}")
                                                        div ...
                                                tr(data-bind="foreach: listOfColumns()")
                                                    td(data-bind="css: { 'red lighten-4': (colName === 'Choose Point')}")
                                                        div ...
                                            // ko if: ($root.reportType() !== 'Property')
                                            tfoot
                                                tr.calculationFooter(data-bind="foreach: listOfColumns()")
                                                    // ko if: $index() === 0
                                                    td
                                                        .globalCalculationsCell
                                                            ul.globalCalculations(data-bind="$root.listOfCalculations")
                                                                li
                                                                    input.medium.filled-in(data-bind="checked: $root.globalcalculateColumnSelectedvalue().indexOf($data) !== -1, click: function () { return $root.globalCalculationClick($element, $data) }, attr: { id: 'globalCalc_' + $index()}", type="checkbox")
                                                                    label.calcLabel(data-bind="text: ' ' + $data, attr: { for: 'globalCalc_' + $index() ,  title: ($root.globalcalculateColumnSelectedvalue[$data] ? 'Selected' : 'Not Selected') }")
                                                    // /ko
                                                    // ko if: $index() > 0
                                                    // ko if: ($root.listOfCalculations().length > 0)
                                                    td(data-bind="css: { 'red lighten-4': (colName === 'Choose Point')}")
                                                        .calculationsCell
                                                            // ko if: ($data.canCalculate)
                                                            ul.calculations
                                                                // ko foreach: $root.listOfCalculations
                                                                li
                                                                    input.medium.filled-in(data-bind="checked: $parent.calculation.indexOf($data) !== -1, click: function () { return $root.calculationClick($element, $data, $parentContext.$index()) }, attr: { id: 'columnCalc_' + $parentContext.$index() + $index()}", type="checkbox")
                                                                    label.calcLabel(data-bind="text: ' ' + $data, attr: { for: 'columnCalc_' + $parentContext.$index() + $index() ,  title: ($root.globalcalculateColumnSelectedvalue[$data] ? 'Selected' : 'Not Selected') }")
                                                                // /ko
                                                            // /ko
                                                    // /ko
                                                    // /ko
                                            //- // /ko
                                div#filterByPoint.tab-pane
                                    // ko if: ($root.reportType() === 'Property')
                                    h6.strong.panel-title
                                        .selectorNames
                                            .form-inline.black-text(style="display: inline-flex")
                                                div.input-field.col
                                                    input.black-text.form-control.input-md.readOnly.name1Filter#name1Filter(data-bind="textInput: $root.name1Filter, attr: {disabled: 'disabled'}", type="text")
                                                    label.grey-text(data-bind="updateLabel: $root.name1Filter, attr: {for: 'name1Filter'}, css: { active: ($root.name1Filter() !== '') }") Name 1
                                                div.input-field.col
                                                    input.black-text.form-control.input-md.readOnly.name2Filter#name2Filter(data-bind="textInput: $root.name2Filter, attr: {disabled: 'disabled'}", type="text")
                                                    label.grey-text(data-bind="updateLabel: $root.name2Filter, attr: {for: 'name2Filter'}, css: { active: ($root.name2Filter() !== '') }") Name 2
                                                div.input-field.col
                                                    input.black-text.form-control.input-md.readOnly.name3Filter#name3Filter(data-bind="textInput: $root.name3Filter, attr: {disabled: 'disabled'}", type="text")
                                                    label.grey-text(data-bind="updateLabel: $root.name3Filter, attr: {for: 'name3Filter'}, css: { active: ($root.name3Filter() !== '') }") Name 3
                                                div.input-field.col
                                                    input.black-text.form-control.input-md.readOnly.name4Filter#name4Filter(data-bind="textInput: $root.name4Filter, attr: {disabled: 'disabled'}", type="text")
                                                    label.grey-text(data-bind="updateLabel: $root.name4Filter, attr: {for: 'name4Filter'}, css: { active: ($root.name4Filter() !== '') }") Name 4
                                        div.pointTypesFilter
                                            span.title Filtered Point Types
                                            ul
                                                // ko foreach: $root.selectedPointTypesFilter
                                                li
                                                    label.blue-grey-text.label-tight(data-bind="text: $data")
                                                // /ko
                                        a.btn.waves-effect.waves-light.blue-grey.right-align.adjustPointTypesFilterButton(data-bind="click: $root.pointSelectorFilter") Point Type Filter
                                    // /ko
                                div.additionalFilters#additionalFilters.tab-pane
                                    // ko if: (reportType() === 'Property')
                                    table.filtersGrid.small.grid.table
                                        tbody(data-bind="foreach: listOfFilters()")
                                            tr.filterdata
                                                td.sorthandle
                                                    .handle
                                                td(data-bind="css: {filterCondition: ($parent.listOfFilters().length > 1), childCondition: childLogic === true, firstConditionInGroup: beginGroup === true, lastConditionInGroup: endGroup === true} ")
                                                    .dropdown.availableConditionsContainer(data-bind="css: {hideCell: $index() === 0} ")
                                                        a.btn.waves-effect.waves-light.blue-grey.dropdown-toggle.conditionButton(data-bind="css: { orCondition: (condition === '$or'), andCondition: (condition === '$and')}", data-toggle="dropdown")
                                                            span(data-bind="text: $root.displayCondition(condition)")
                                                        ul.operators.dropdown-menu
                                                            // ko foreach: $root.conditions()
                                                            li
                                                                a.condition(data-bind="click: function(){ $root.setFilterConfig($parentContext.$index(), $data, 'condition') }, text: text", required)
                                                            // /ko
                                                td.filterName
                                                    // ko if: ($parent.reportType() !== 'Property')
                                                    span(data-bind="text: filterName.replace(/_/g, ' ')")
                                                    // /ko
                                                    .dropdown.availablePropertiesContainer(data-bind="css: {disabled: !$root.canEdit()}")
                                                        a.btn.waves-effect.waves-light.blue-grey.dropdown-toggle.propertySelect(data-bind="click: function(){$root.propertySelectClick($element)}, css: {disabled: !$root.canEdit()}",data-toggle="dropdown")
                                                            span(data-bind="text: (filterName !== '- - -' ? filterName : 'Properties (' + $root.listOfFilterPropertiesLength + ')')")
                                                            span.caret.lm10px
                                                        ul.enumproperties.dropdown-menu
                                                            input.form-control.inputSearch(data-bind="textInput: $root.filterPropertiesSearchFilter", type="text", placeholder="Search...")
                                                            li(role="separator", class="divider")
                                                            // ko foreach: $parent.filterFilteredProps()
                                                            li
                                                                a(data-bind="click: function(){ $root.selectPropertyFilter($element, $parentContext.$index(), $data) }, text: $data.name")
                                                            // /ko
                                                td.filterOperator
                                                    .dropdown.availableOperatorsContainer(data-bind="css: {disabled: !$root.canEdit()}")
                                                        a.btn.waves-effect.waves-light.blue-grey.dropdown-toggle.operatorButton(data-bind="css: {disabled: !$root.canEdit()}",data-toggle="dropdown")
                                                            span(data-bind="text: $root.displayOperator(operator)")
                                                            //span.caret.lm10px
                                                        ul.operators.dropdown-menu
                                                            // ko foreach: $root.operators(valueType)
                                                            li
                                                                a.operator(data-bind="click: function(){ $root.setFilterConfig($parentContext.$index(), $data, 'operator') }, text: text", required)
                                                            // /ko
                                                td.emptyColumn
                                                td.filterValue
                                                    div.col-md-9
                                                        include filterValueUI
                                                // ko if: ($root.canEdit())
                                                td.removecolumn
                                                    a.span.removerow.blue-grey-text(data-bind="click: $parent.deleteFilterRow, attr: { title: valueType}") Remove
                                                // /ko
                                    // /ko
                                    // ko if: ($root.reportType() === 'Property' && $root.canEdit())
                                    a.small.addFilterbutton(href="#") Add Filter
                                    // /ko
                                    // ko if: (reportType() !== 'Property')
                                    //span.reportDateRangePicker
                                    //    div.input-field
                                    //        input.input.form-control.filterContainer.durationDateRange#durationDateRange(data-bind="reportDateRangePicker: selectedDuration, enable: $root.canEdit(), css: { durationError: $root.durationError() }", type="text", placeholder="Select...")
                                    //        i.fa.fa-calendar.glyphicon.glyphicon-calendar.durationCalendarIcon
                                    //        label.reportDateRangeLabel.small(data-bind="attr: {for: 'durationDateRange'}") Duration:&nbsp;
                                    //br
                                    //span.timePickers
                                    //    div.input-field
                                    //        input.input.form-control.filterContainer.durationDateRangeTime#startTimeOffSet(data-bind="reportTimePicker: durationStartTimeOffSet, enable: $root.canEdit(), css: { durationError: $root.durationError() }", title="Start Time OffSet", type="text")
                                    //        label.timePickerLabel.small(data-bind="attr: {for: 'startTimeOffSet'}") From:&nbsp;
                                    //    div.input-field
                                    //        input.input.form-control.filterContainer.durationDateRangeTime#endTimeOffSet(data-bind="reportTimePicker: durationEndTimeOffSet, enable: $root.canEdit(), css: { durationError: $root.durationError() }", title="End Time OffSet", type="text")
                                    //        label.timePickerLabel.small(data-bind="attr: {for: 'endTimeOffSet'}") To:&nbsp;
                                    .reportDatePickers
                                        span.reportStartDatePicker
                                            label(for="reportStartDate") Start Date
                                            div.input-field
                                                input#reportStartDate.datepicker(date-bind="select: $root.startDate", type="date")
                                        span.reportEndDatePicker
                                            label(for="reportEndDate") End Date
                                            div.input-field
                                                input#reportEndDate.datepicker(date-bind="select: $root.endDate", type="date")
                                    br
                                    span.intervalSettings
                                        div.intervalsContainer.input-field
                                            input.intervalValue.form-control.input-md.filled-in#intervalValue(data-bind="value: $root.intervalValue, enable: ($root.canEdit() && !$root.durationError()), css: { durationError: $root.durationError() }", type="number", min="1", max="9999")
                                            label(data-bind="attr: {for: 'intervalValue'}") Interval:
                                        .dropdown.availableIntervalsContainer
                                            a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-bind="materializeDropdown, css: { durationError: $root.durationError() }", data-activates="intervals")
                                                span(data-bind="text: $root.interval")
                                                span.caret.lm10px
                                            ul#intervals.intervals.dropdown-content
                                                // ko foreach: $root.listOfIntervalsComputed()
                                                li
                                                    a.operator(data-bind="click: function(){ $root.selectInterval($data.text) }, text: $data.text", required)
                                                // /ko
                                    // /ko
                                div#schedule.tab-pane
                                    .row
                                        h5 Scheduled Actions
                                    // ko foreach: scheduler.scheduleEntries
                                    .row.flex.flex-center
                                        input.filled-in(type='checkbox', data-bind='checked: enable, attr: { "id": $root.makeId() }')
                                        label(data-bind='attr: { "for": $root.getLastId() }') Enable
                                        .padleft-20
                                            span(data-bind='html: parsed.plainEnglish')
                                            span , email this report to&nbsp;
                                            span(data-bind='text: $root.scheduler.buildRecipients()')
                                        i.padleft-20.material-icons(data-bind='click: $root.scheduler.modal.open') settings
                                    // /ko
                                    a.btn.waves-effect.blue-grey(data-bind='click: scheduler.modal.open.bind($data, "new")') Add Scheduled Action
                                .reportButtons
                                    // ko if: ($root.canEdit())
                                    //- a.btn.tiny.waves-effect.waves-light.blue-grey.tooltipped.saveReportButton(style="margin-right: 2px;", data-position="top" data-delay="500" data-tooltip="Save report")
                                        //| Save
                                        i.material-icons.tiny.center done
                                    // /ko
                                    //- a.btn.tiny.waves-effect.waves-light.blue-grey.tooltipped.runReportButton(data-bind="enabled: reportResultViewed()", data-position="top" data-delay="500" data-tooltip="Run report")
                                        //| Run
                                        i.material-icons.center play_arrow
                                    .screenMessages
                                        .row.well-sm
                                            .errorMessage.alert-danger
                                            .successMessage.alert-success
                    .tabViewReport.well.tab-pane.workingPane
                        // ko if: (reportType() !== 'Property')
                        .row
                            ul.tabs.viewReportNav
                                // ko if: (chartable())
                                li.tab.col.s1.gridData(role="presentation")
                                    a.btn.waves-effect.waves-light.blue-grey.active(data-bind="click: function () { $root.focusGridView($element) }", href="#gridData")
                                        i.material-icons.center view_list
                                li.tab.col.s1.reportChart(role="presentation")
                                    a.btn.waves-effect.waves-light.blue-grey(data-bind="click: function () { $root.focusChartView($element) }", href="#chartData")
                                        i.material-icons.center insert_chart
                                // /ko
                        // /ko
                        div.tab-content
                            div#gridData.active.tab-pane
                                .row
                                    h6.text-center.reportDisplayTitle(data-bind="text: reportDisplayTitle")
                                    table.table.table-striped.table-bordered.table-responsive.dataTablePlaceHolder
                                        tfoot.tableFooter
                                            tr(data-bind="foreach: listOfColumns()")
                                                td.strong(data-bind="attr: { colindex:  $index() }")
                            div#chartData.tab-pane
                                .chartButtons
                                    .dropdown.availableChartTypes.chartTab(tabindex="990")
                                        a.btn.waves-effect.waves-light.blue-grey.dropdown-button(href="#", data-activates="chartTypesChartdataDropdown")
                                            span(data-bind="text: selectedChartType()")
                                            // ko if: ($root.listOfChartTypes().length > 1)
                                            span.caret.lm10px
                                            // /ko
                                        // ko if: ($root.listOfChartTypes().length > 1)
                                        ul#chartTypesChartdataDropdown.chartTypes.dropdown-content
                                            // ko foreach: $root.listOfChartTypes()
                                            li
                                                a(data-bind="click: function(){ $root.selectChartType($element, $data.value, true) }, text: $data.text")
                                            // /ko
                                        // /ko
                                    a.btn.waves-effect.waves-light.blue-grey(data-bind="click: function() { $root.printChartDiv() }", href="#")
                                        i.material-icons print
                                        span.printButton Print
                                .reportChartDiv
    include footer
    include popoverColumnSettings
    include modals/dialogScreens
    include modals/dialogEditColumn
    include modals/dialogViewColumn
    include modals/dialogGlobalFieldsEditColumn

    script#scheduleModalTemplate(type='text/html')
        #scheduleModal.modal.modal-fixed-footer
            .modal-content
                form
                    .row.flex.flex-center.flex-start.standardInterval
                        .input-field
                            select(data-bind='options: availableIntervals, value: selectedInterval')
                            label Interval
                        .input-field(data-bind='visible: selectedInterval() === "Advanced"')
                            //- The active class on our label resolves the conflict of label overlapping initial value
                            label.active(for='timepicker') Time
                            input#timepicker2.timepicker(type='time', data-bind='value: selectedTime')
                        .flex.flex-center.flex-start(data-bind='visible: selectedInterval() !== "Advanced"')
                            .input-field.center(data-bind='visible: selectedInterval() !== "Daily"')
                                span On 
                                span(data-bind='visible: selectedInterval() === "Monthly"') The
                            .input-field(data-bind='visible: selectedInterval() === "Weekly"')
                                select(data-bind='options: availableDaysOfWeek, optionsText: "text", optionsValue: "value", value: selectedDayOfWeek')
                                label Day of Week
                            .input-field(data-bind='visible: selectedInterval() === "Monthly"')
                                select(data-bind='options: availableDates, optionsText: "text", optionsValue: "value", value: selectedDate')
                                label Date
                            .input-field(data-bind='visible: selectedInterval() === "Yearly"')
                                select(data-bind='options: availableMonths, optionsText: "text", optionsValue: "value", value: selectedMonth')
                                label Month
                            .input-field(data-bind='visible: selectedInterval() === "Yearly"')
                                select(data-bind='options: availableDates, optionsText: "text", optionsValue: "value", value: selectedDate')
                                label Date
                            .input-field.center At
                            .input-field
                                //- The active class on our label resolves the conflict of label overlapping initial value
                                label.active(for='timepicker') Time
                                input#timepicker.timepicker(type='time', data-bind='value: selectedTime')
                    .row(data-bind='visible: selectedInterval() === "Advanced"')
                        .row.input-field
                            select(data-bind='selectedOptions: selectedDaysOfWeek', multiple)
                                option(disabled, selected) Every day of the week
                                // ko foreach: availableDaysOfWeek
                                option(data-bind='value: $data.value, text: $data.text, attr: { selected: !!~$parent.selectedDaysOfWeek.indexOf($data.value) }')
                                // /ko
                            label Days of Week
                        .row.input-field
                            select(data-bind='selectedOptions: selectedDates', multiple)
                                option(disabled) Every day of the month
                                // ko foreach: availableDates
                                option(data-bind='value: $data.value, text: $data.text, attr: { selected: !!~$parent.selectedDates.indexOf($data.value) }')
                                // /ko
                            label Dates
                        .row.input-field
                            select(data-bind='selectedOptions: selectedMonths', multiple)
                                option(disabled) Every month of the  year
                                // ko foreach: availableMonths
                                option(data-bind='value: $data.value, text: $data.text, attr: { selected: !!~$parent.selectedMonths.indexOf($data.value) }')
                                // /ko
                            label Months
            .modal-footer
                a.btn.waves-effect.blue-grey(data-bind="click: save") Save
                a.btn.waves-effect.grey(data-bind="click: cancel") Cancel
                a.btn.wafes-effect.red.darken-4.left(data-bind="click: deleteMe") Delete
