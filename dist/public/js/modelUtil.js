var mongo=require("mongodb"),pointsCollection="points",Config=require("./lib/config.js"),async=require("async"),ModelUtil;ModelUtil=function(){var a={};return a.Device={updateAll:function(a,b,c){this.applyModelType(a,function(a,b){c(null,b)})},applyModelType:function(a,b){b(null,Config.EditChanges.applyDeviceTypeModelType(a))},applyUplinkPort:function(a,b){b(null,Config.EditChanges.applyDeviceTypeUplinkPort(a))},applyEthernetProtocol:function(a,b){b(null,Config.EditChanges.applyDeviceTypeEthernetProtocol(a))},applyPortNProtocol:function(a,b){b(null,Config.EditChanges.applyDeviceTypePortNProtocol(a))}},a["Remote Unit"]={updateAll:function(a,b,c){this.applyModelType(a,function(a,b){c(null,b)})},applyModelType:function(a,b){b(null,Config.EditChanges.applyRemoteUnitTypeModelType(a))},applyNetworkType:function(a){callback(null,Config.EditChanges.applyRemoteUnitTypeNetworkType(a))}},a["Analog Input"]={updateAll:function(b,c,d){a["Analog Input"].applyDevModel(b,function(e,f){b.point=f,a["Analog Input"].applySensorPoint(b,c,function(a,b){d(null,b)})})},applySensorPoint:function(a,b,c){aiPoint=a.point,b.collection("points").findOne({_id:Config.Utility.getPropertyObject("Sensor Point",aiPoint).Value},function(b,d){a={point:aiPoint,refPoint:d,property:"Sensor Point"},a.propertyObject=Config.Utility.getPropertyObject(a.property,a.point),[7,8].indexOf(a.point._rmuModel)===-1?c(null,Config.EditChanges.applyAnalogInputTypeSensorPoint(a)):c(null,a.point)})},applyDevModel:function(a,b){b(null,Config.EditChanges.applyAnalogInputTypeDevModel(a))}},a["Analog Output"]={updateAll:function(b,c,d){a["Analog Output"].applyDevModel(b,function(e,f){b.point=f,a["Analog Output"].applySensorPoint(b,c,function(a,b){d(null,b)})})},applySensorPoint:function(a,b,c){aoPoint=a.point,b.collection("points").findOne({_id:Config.Utility.getPropertyObject("Sensor Point",aoPoint).Value},function(b,d){a={point:aoPoint,refPoint:d,property:"Sensor Point"},a.propertyObject=Config.Utility.getPropertyObject(a.property,a.point),c(null,Config.EditChanges.applyAnalogOutputTypeSensorPoint(a))})},applyOutputType:function(a,b){b(null,Config.EditChanges.applyAnalogOutputTypeOutputType(a))},applyValue:function(a){},applyDevModel:function(a,b){b(null,Config.EditChanges.applyAnalogOutputTypeDevModel(a))}},a["Analog Value"]={updateAll:function(b,c,d){a["Analog Value"].applyDevModel(b,function(a,b){d(null,b)})},applyDevModel:function(a,b){b(null,Config.EditChanges.applyAnalogValueTypeDevModel(a))},applyValue:function(a){}},a["Binary Value"]={updateAll:function(b,c,d){a["Binary Value"].applyDevModel(b,function(e,f){b.point=f,a["Binary Value"].applyFeedback(b,c,function(a,b){d(null,b)})})},applyDevModel:function(a,b){b(null,Config.EditChanges.applyBinaryValueTypeDevModel(a))},applyValue:function(a){},applyFeedback:function(a,b,c){bvPoint=a.point,b.collection("points").findOne({_id:Config.Utility.getPropertyObject("Feedback Point",bvPoint).Value},function(b,d){a={point:bvPoint,refPoint:d,property:"Feedback Point"},a.propertyObject=Config.Utility.getPropertyObject(a.property,a.point),c(null,Config.EditChanges.applyBinaryInputTypeFeedbackPoint(a))})}},a["Binary Input"]={updateAll:function(b,c,d){a["Binary Input"].applyDevModel(b,function(e,f){b.point=f,a["Binary Input"].applyFeedback(b,c,function(a,b){d(null,b)})})},applyFeedback:function(a,b,c){biPoint=a.point,b.collection("points").findOne({_id:Config.Utility.getPropertyObject("Feedback Point",biPoint).Value},function(b,d){a={point:biPoint,refPoint:d,property:"Feedback Point"},a.propertyObject=Config.Utility.getPropertyObject(a.property,a.point),c(null,Config.EditChanges.applyBinaryInputTypeFeedbackPoint(a))})},applyInputType:function(a){callback(null,Config.EditChanges.applyBinaryInputTypeInputType(a))},applyDevModel:function(a,b){b(null,Config.EditChanges.applyBinaryInputTypeDevModel(a))}},a["Binary Output"]={updateAll:function(a,b,c){this.applyDevModel(a,function(a,b){c(null,b)})},applyFeedbackType:function(a){callback(null,Config.EditChanges.applyBinaryOutputTypeFeedbackType(a))},applyOutputType:function(a){callback(null,Config.EditChanges.applyBinaryOutputTypeOutputType(a))},applyValue:function(a){},applyDevModel:function(a,b){b(null,Config.EditChanges.applyBinaryOutputTypeDevModel(a))}},a["MultiState Value"]={updateAll:function(a,b,c){this.applyDevModel(a,function(a,b){c(null,b)})},applyValue:function(a){},applyDevModel:function(a,b){b(null,Config.EditChanges.applyMultiStateValueTypeDevModel(a))}},a.Accumulator={updateAll:function(a,b,c){this.applyDevModel(a,function(a,b){c(null,b)})},applyValue:function(a){},applyDevModel:function(a,b){b(null,Config.EditChanges.applyAccumulatorTypeDevModel(a))}},a}(ModelUtil||{}),module.exports={logger:function(a,b){return console.log(a),b()},Device:ModelUtil.Device,"Remote Unit":ModelUtil["Remote Unit"],"Analog Input":ModelUtil["Analog Input"],"Analog Output":ModelUtil["Analog Output"],"Analog Value":ModelUtil["Analog Value"],"Binary Value":ModelUtil["Binary Value"],"Binary Input":ModelUtil["Binary Input"],"Binary Output":ModelUtil["Binary Output"],"MultiState Value":ModelUtil["MultiState Value"],Accumulator:ModelUtil.Accumulator};