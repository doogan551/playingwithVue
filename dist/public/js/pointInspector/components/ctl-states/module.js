define(["knockout","text!./view.html"],function(a,b){function c(a){var b=this;this.propertyName=a.propertyName,this.data=a.data[this.propertyName],this.states=this.data.ValueOptions,this.isInEditMode=a.rootContext.isInEditMode,this.originalText="",b.checkDuplicate=function(a,b){},b.setOriginalText=function(a,c){b.originalText=a.name()},b.setOriginalEnum=function(a,c){b.orignalEnum=a.value()},b.triggerHandler=function(a,c){for(var d=[],f=0;f<b.states().length;f++)d.indexOf(b.states()[f].name())<0?d.push(b.states()[f].name()):(a.name(b.originalText),bannerJS.showBanner("Cannot have duplicate States texts. The States has been set back to its original value.","Dismiss"));for(var g=[],h=0;h<b.states().length;h++)g.indexOf(b.states()[h].value())<0?g.push(b.states()[h].value()):(a.value(b.orignalEnum),bannerJS.showBanner("Cannot have duplicate States enums. The States has been set back to its original value.","Dismiss"));b.updateEnumOrder(),e($(c.target))},b.updateEnumOrder=function(){var a=function(a,b){return a.value()-b.value()};b.states().sort(a)}}function d(b){return Math.max.apply(Math,a.utils.arrayMap(b,function(a){return a.value()}))+1}function e(a){$(document).triggerHandler({type:"viewmodelChange",targetElement:a,property:"States",refPoint:null})}return c.prototype.addNew=function(b,c){var e=b.states,f=d(e()),g="State_"+f+"_Text";e.push({name:a.observable(g),value:a.observable(f)}),$("._stateName:last").get(0).select()},c.prototype.remove=function(a){var b=this;b.states.remove(a),e(null)},c.prototype.dispose=function(){},{viewModel:c,template:b}});