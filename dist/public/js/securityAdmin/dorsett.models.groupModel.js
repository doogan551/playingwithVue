dorsett.models=dorsett.models||{},dorsett.models.mappings=dorsett.models.mappings||{},dorsett.models.groupModel=function(a){var b=ko.utils.parseJson(ko.toJSON(a)),c=[];b.Users&&(c=$.map(b.Users,function(a,b){var c=ko.utils.arrayFirst(dorsett.userData.allData(),function(a){return a._id==b});if(c)return{userid:b,FullName:c["First Name"]+" "+c["Last Name"],Photo:c.Photo,"Group Admin":a["Group Admin"]}})),b.Users=c;var d,e={_id:null,"User Group Name":"",Description:"",Users:[],_pAccess:0,Photo:""};d=$.extend(e,b),ko.mapping.fromJS(d,dorsett.models.mappings.Group,this)},dorsett.models.groupUserModel=function(a){var b,c={userid:"",FullName:"",Photo:"","Group Admin":!1};b=$.extend(c,a),ko.mapping.fromJS(b,dorsett.models.mappings.groupUser,this)},dorsett.models.mappings.Group={copy:["_id"],key:function(a){return a._id},"User Group Name":{create:function(a){return ko.observable(a.data).extend({required:{message:" *required field"},validation:{validator:function(b){return!ko.utils.arrayFirst(dorsett.groupData.allData(),function(c){return c._id!=a.parent._id&&c["User Group Name"].toLowerCase()==b.toLowerCase()})},message:"*already exists"}})}},Users:{create:function(a){return new dorsett.models.groupUserModel(a.data)}},_pAccess:{create:function(a){return ko.observable(a.data)}}},dorsett.models.mappings.groupUser={copy:["userid"]};